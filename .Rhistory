tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_my_data) +
tm_dots(col = "regiao",
size = 0.02) +
tm_shape(buffer_my_data) +
tm_borders(col = "black")
# Combinando os objetos shp_saopaulo, sf_my_data e buffer_my_data:
tm_shape(shp = sf_my_data) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_my_data) +
tm_dots(col = "regiao",
size = 0.02) +
tm_shape(buffer_my_data) +
tm_borders(col = "black")
# Combinando os objetos shp_saopaulo, sf_my_data e buffer_my_data:
tm_shape(shp = sf_my_data) +
tm_dots(col = "regiao",
size = 0.02) +
tm_shape(buffer_my_data) +
tm_borders(col = "black")
tm_shape(shp = sf_my_data) +
tm_dots(col = "regiao",
size = 0.02) +
tm_shape(shp = buffer_union) +
tm_borders(col = "black") +
tm_fill(col = "gray",
alpha = 0.5)
# O primeiro passo será criar um objeto sp com a base de dados atrelada a ele:
my_data_sp_df <- SpatialPointsDataFrame(data = my_data,
coords = coordenadas_my_data,
proj4string = CRS("+proj=longlat"))
# Note como a função SpatialPointsDataFrame() permite a existência de um data
# frame junto a nosso objeto de classe sp:
my_data_sp_df@data
# Para o cálculo das kernel densities, podemos utilizar a função kernelUD():
my_data_dens <- kernelUD(xy = my_data_sp_df,
h = "href",
grid = 1000,
boundary = NULL)
plot(my_data_dens)
# Para estabelecer as zonas com maior densidade, propomos o seguinte:
zona1 <- getverticeshr(x = my_data_dens, percent = 20)
zona2 <- getverticeshr(x = my_data_dens, percent = 40)
zona3 <- getverticeshr(x = my_data_dens, percent = 60)
zona4 <- getverticeshr(x = my_data_dens, percent = 80)
tmap_options(check.and.fix = TRUE)
tm_shape(shp = shp_saopaulo) +
tm_fill(col = "gray90") +
tm_borders(col = "white", alpha = 0.5) +
tm_shape(shp = my_data_sp_df) +
tm_dots(col = "regiao", size = 0.25) +
tm_shape(zona1) +
tm_borders(col = "firebrick4", lwd = 2.5) +
tm_fill(alpha = 0.4, col = "firebrick4") +
tm_shape(zona2) +
tm_borders(col = "firebrick3", lwd = 2.5) +
tm_fill(alpha = 0.3, col = "firebrick3") +
tm_shape(zona3) +
tm_borders(col = "firebrick2", lwd = 2.5) +
tm_fill(alpha = 0.2, col = "firebrick2") +
tm_shape(zona4) +
tm_borders(col = "firebrick1", lwd = 2.5) +
tm_fill(alpha = 0.1, col = "firebrick1")
tm_shape(shp = sf_my_data) +
tm_fill(col = "gray90") +
tm_borders(col = "white", alpha = 0.5) +
tm_shape(shp = my_data_sp_df) +
tm_dots(col = "regiao", size = 0.25) +
tm_shape(zona1) +
tm_borders(col = "firebrick4", lwd = 2.5) +
tm_fill(alpha = 0.4, col = "firebrick4") +
tm_shape(zona2) +
tm_borders(col = "firebrick3", lwd = 2.5) +
tm_fill(alpha = 0.3, col = "firebrick3") +
tm_shape(zona3) +
tm_borders(col = "firebrick2", lwd = 2.5) +
tm_fill(alpha = 0.2, col = "firebrick2") +
tm_shape(zona4) +
tm_borders(col = "firebrick1", lwd = 2.5) +
tm_fill(alpha = 0.1, col = "firebrick1")
tm_shape(shp = sf_my_data) +
tm_shape(shp = my_data_sp_df) +
tm_dots(col = "regiao", size = 0.25) +
tm_shape(zona1) +
tm_borders(col = "firebrick4", lwd = 2.5) +
tm_fill(alpha = 0.4, col = "firebrick4") +
tm_shape(zona2) +
tm_borders(col = "firebrick3", lwd = 2.5) +
tm_fill(alpha = 0.3, col = "firebrick3") +
tm_shape(zona3) +
tm_borders(col = "firebrick2", lwd = 2.5) +
tm_fill(alpha = 0.2, col = "firebrick2") +
tm_shape(zona4) +
tm_borders(col = "firebrick1", lwd = 2.5) +
tm_fill(alpha = 0.1, col = "firebrick1")
# Carregando um shapefile do município de São Paulo
shp_saopaulo <- readOGR("shapefile_municipio", "municipio_sp")
pacotes <- c("tidyverse","sf","tmap","rgdal","rgeos","adehabitatHR","knitr",
"kableExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando a base de dados
load("my_data.RData")
# Observando a classe do objeto shoppings:
class(my_data)
# Observando as variáveis da base de dados shoppings:
my_data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Criando um objeto do tipo sf a partir de um data frame:
sf_my_data <- st_as_sf(x = my_data,
coords = c("long_vector", "lat_vector"),
crs = 4326)
# Observando a classe do objeto sf_shoppings:
class(sf_my_data)
# Um componente interessante do objeto sf_shoppings é chamado geometry:
sf_my_data$geometry
# Plotando o objeto sf_shoppings de forma espacial:
tm_shape(shp = sf_my_data) +
tm_dots(size = 1)
# Adicionando uma camada de um mapa do Leafleet que considere a bounding box do
# objeto sf_shoppings:
tmap_mode("view")
tm_shape(shp = sf_my_data) +
tm_dots(col = "deepskyblue4",
border.col = "black",
size = 0.2,
alpha = 0.8)
# Carregando um shapefile do município de São Paulo
shp_saopaulo <- readOGR("shapefile_municipio", "municipio_sp")
# Visualização gráfica do objeto shp_saopaulo:
tm_shape(shp = shp_saopaulo) +
tm_borders()
# Combinando o objeto shp_saopaulo com o objeto sf_my_data:
tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_my_data) +
tm_dots(col = "regiao",
size = 0.02)
# Visualização gráfica do objeto shp_saopaulo:
tm_shape(shp = shp_saopaulo) +
tm_borders()
tm_shape(shp = sf_my_data) +
tm_dots(col = "regiao",
size = 0.02)
tm_shape(shp = sf_my_data) +
tm_dots(col = "regiao",
size = 0.02)
# A aplicação da técnica de buffering pode ser feita com o uso da função
# gBuffer(), do pacote rgeos:
buffer_my_data <- gBuffer(spgeom = sf_my_data,
width = 1500,
byid = TRUE)
#tm_shape(shp = shp_saopaulo) +
#  tm_borders(alpha = 0.5) +
#  tm_shape(shp = sf_my_data) +
#  tm_dots(col = "regiao",
#          size = 0.02)
tm_shape(shp = sf_my_data) +
tm_dots(col = "deepskyblue4",
border.col = "black",
size = 0.2,
alpha = 0.8)
# A aplicação da técnica de buffering pode ser feita com o uso da função
# gBuffer(), do pacote rgeos:
buffer_my_data <- gBuffer(spgeom = sf_my_data,
width = 1500,
byid = TRUE)
# Para tanto, primeiramente, precisaremos isolar as coordenadas de longitude e
# de latitude do data frame original my_data:
coordenadas_my_data <- cbind(my_data$long_vector,
my_data$lat_vector)
coordenadas_my_data
# Depois, utilizaremos a função SpatialPoints() para criar um objeto do tipo sp:
sp_my_data <- SpatialPoints(coords = coordenadas_my_data,
proj4string = CRS("+proj=longlat"))
# Criamos nosso primeiro objeto de classe sp! Vamos explorá-lo:
sp_my_data@coords
sp_my_data@bbox
sp_my_data@proj4string@projargs
# Uma plotagem básica:
plot(sp_my_data)
# Visualizando o resultado:
tmap_mode("plot")
tm_shape(shp = sp_my_data) +
tm_dots(size = 1)
# Vamos tentar aplicar a função gBuffer() mais uma vez:
buffer_my_data <- gBuffer(spgeom = sp_my_data,
width = 1500,
byid = TRUE)
# Dessa vez, o erro foi diferente. Além de exigir um objeto de classe sp,
# a função gBuffer() exige que o objeto se oriente com distâncias euclidianas.
# Nosso atual objeto se orienta de forma geodésica.
my_data_UTM <- spTransform(x = sp_my_data,
CRSobj = CRS("+init=epsg:22523"))
# Visualizando o resultado:
tm_shape(shp = my_data_UTM) +
tm_dots(size = 1)
# Agora sim, poderemos aplicar a função gBuffer():
buffer_my_data <- gBuffer(spgeom = my_data_UTM,
width = 1500,
byid = TRUE)
# Plotagem do objeto buffer_my_data:
tm_shape(shp = buffer_my_data) +
tm_borders()
tmap_mode("view")
tm_shape(shp = buffer_my_data) +
tm_borders()
tm_shape(shp = sf_my_data) +
tm_dots(col = "deepskyblue4",
size = 0.02) +
tm_shape(buffer_my_data) +
tm_borders(col = "black")
# A técnica de buffer union combina aqueles outputs da técnica de buffering que,
# por ventura, se encontrem.
buffer_union <- gUnaryUnion(spgeom = buffer_my_data)
tm_shape(shp = sf_my_data) +
tm_dots(col = "deepskyblue4",
size = 0.02) +
tm_shape(shp = buffer_union) +
tm_borders(col = "black") +
tm_fill(col = "gray",
alpha = 0.5)
# O primeiro passo será criar um objeto sp com a base de dados atrelada a ele:
my_data_sp_df <- SpatialPointsDataFrame(data = my_data,
coords = coordenadas_my_data,
proj4string = CRS("+proj=longlat"))
# Note como a função SpatialPointsDataFrame() permite a existência de um data
# frame junto a nosso objeto de classe sp:
my_data_sp_df@data
# Para o cálculo das kernel densities, podemos utilizar a função kernelUD():
my_data_dens <- kernelUD(xy = my_data_sp_df,
h = "href",
grid = 1000,
boundary = NULL)
plot(my_data_dens)
# Para estabelecer as zonas com maior densidade, propomos o seguinte:
zona1 <- getverticeshr(x = my_data_dens, percent = 20)
zona2 <- getverticeshr(x = my_data_dens, percent = 40)
zona3 <- getverticeshr(x = my_data_dens, percent = 60)
zona4 <- getverticeshr(x = my_data_dens, percent = 80)
tmap_options(check.and.fix = TRUE)
tm_shape(shp = sf_my_data) +
tm_fill(col = "gray90") +
tm_borders(col = "white", alpha = 0.5) +
tm_shape(shp = my_data_sp_df) +
tm_dots(col = "regiao", size = 0.25) +
tm_shape(zona1) +
tm_borders(col = "firebrick4", lwd = 2.5) +
tm_fill(alpha = 0.4, col = "firebrick4") +
tm_shape(zona2) +
tm_borders(col = "firebrick3", lwd = 2.5) +
tm_fill(alpha = 0.3, col = "firebrick3") +
tm_shape(zona3) +
tm_borders(col = "firebrick2", lwd = 2.5) +
tm_fill(alpha = 0.2, col = "firebrick2") +
tm_shape(zona4) +
tm_borders(col = "firebrick1", lwd = 2.5) +
tm_fill(alpha = 0.1, col = "firebrick1")
# O primeiro passo será criar um objeto sp com a base de dados atrelada a ele:
my_data_sp_df <- SpatialPointsDataFrame(data = my_data,
coords = coordenadas_my_data,
proj4string = CRS("+proj=longlat"))
# Note como a função SpatialPointsDataFrame() permite a existência de um data
# frame junto a nosso objeto de classe sp:
my_data_sp_df@data
# Para o cálculo das kernel densities, podemos utilizar a função kernelUD():
my_data_dens <- kernelUD(xy = my_data_sp_df,
h = "href",
grid = 1000,
boundary = NULL)
plot(my_data_dens)
# Para estabelecer as zonas com maior densidade, propomos o seguinte:
zona1 <- getverticeshr(x = my_data_dens, percent = 20)
zona2 <- getverticeshr(x = my_data_dens, percent = 40)
zona3 <- getverticeshr(x = my_data_dens, percent = 60)
zona4 <- getverticeshr(x = my_data_dens, percent = 80)
load("C:/Users/alber/Dropbox/MBA/TCC/completo.RData")
View(completo)
pacotes <- c("rvest","dplyr","robotstxt","XML","stringr", "plotly", "ggplot2", "plyr", "ggvis", "knitr", "httr", "tidyverse", "RSelenium", "netstat")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# inciando o server
rs_driver_object <- rsDriver(browser = 'chrome',
chromever = '103.0.5060.24',
verbose = FALSE)
# inciando o server
rs_driver_object <- rsDriver(browser = 'chrome',
chromever = '103.0.5060.24',
verbose = FALSE)
help(bkde2D)
load("completo.RData")
help(raster)
kde <- bkde2D(completo[,c("long_vector","lat_vector")],
bandwidth=c(.0045, .0068), gridsize = c(1000,1000))
library("leaflet")
library("data.table")
library("sp")
library("rgdal")
# library("maptools")
library("KernSmooth")
library("raster")
kde <- bkde2D(completo[,c("long_vector","lat_vector")],
bandwidth=c(.0045, .0068), gridsize = c(1000,1000))
# Criando um Raster a partir da Densidade de Kernel criada
KernelDensityRaster <- raster(list(x=kde$x1 ,y=kde$x2 ,z = kde$fhat))
# Criando uma função pal para colorir o Raster
palRaster <- colorNumeric("Spectral", domain = KernelDensityRaster@data@values)
## Utilizando o mapa Leaflet com o raster
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .6) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
# Atribuindo NA às células com densidade baixa (<1) para torná-las transparentes no mapa
KernelDensityRaster@data@values[which(KernelDensityRaster@data@values < 1)] <- NA
# Utilizando a função palRaster para torná-las transparentes
palRaster <- colorNumeric("Spectral", domain = KernelDensityRaster@data@values, na.color = "transparent")
## Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
palRaster <- colorBin("Spectral", bins = 7, domain = KernelDensityRaster@data@values, na.color = "transparent")
## Leaflet map with raster
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
## Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
## Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
palRaster <- colorBin("red", bins = 7, domain = KernelDensityRaster@data@values, na.color = "transparent")
# Utilizando a função palRaster para torná-las transparentes
palRaster <- colorNumeric("red", domain = KernelDensityRaster@data@values, na.color = "transparent")
## Mapa Leaflet com o raster
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
# Utilizando a função palRaster para torná-las transparentes
palRaster <- colorNumeric("RdYlBu", domain = KernelDensityRaster@data@values, na.color = "transparent")
## Mapa Leaflet com o raster
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
# Atribuindo NA às células com densidade baixa (<10) para torná-las transparentes no mapa
KernelDensityRaster@data@values[which(KernelDensityRaster@data@values < 1)] <- NA
# Utilizando a função palRaster para torná-las transparentes
palRaster <- colorNumeric("RdYlBu", domain = KernelDensityRaster@data@values, na.color = "transparent")
## Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
palRaster <- colorBin("Spectral", bins = 7, domain = KernelDensityRaster@data@values, na.color = "transparent")
## Mapa Leaflet com o raster
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
## Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
palRaster <- colorBin("Spectral", bins = 7, domain = KernelDensityRaster@data@values, na.color = "transparent")
## Mapa Leaflet com o raster
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
library("leaflet")
library("data.table")
library("sp")
library("rgdal")
library("KernSmooth")
library("raster")
kde <- bkde2D(completo[,c("long_vector","lat_vector")],
bandwidth=c(.005, .005), gridsize = c(1000,1000))
# Criando um Raster a partir da Densidade de Kernel criada
KernelDensityRaster <- raster(list(x=kde$x1 ,y=kde$x2 ,z = kde$fhat))
# Criando uma função pal para colorir o Raster
palRaster <- colorNumeric("Spectral", domain = KernelDensityRaster@data@values)
## Utilizando o mapa Leaflet com o raster
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .6) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
# Atribuindo NA às células com densidade baixa (<10) para torná-las transparentes no mapa
KernelDensityRaster@data@values[which(KernelDensityRaster@data@values < 1)] <- NA
# Utilizando a função palRaster para torná-las transparentes
palRaster <- colorNumeric("Spectral", domain = KernelDensityRaster@data@values, na.color = "transparent")
# Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
# Caso queira um raster "binned"
palRaster <- colorBin("Spectral", bins = 7, domain = KernelDensityRaster@data@values, na.color = "transparent")
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
kde <- bkde2D(completo[,c("long_vector","lat_vector")],
bandwidth=c(.006, .006), gridsize = c(1000,1000))
# Criando um Raster a partir da Densidade de Kernel criada
KernelDensityRaster <- raster(list(x=kde$x1 ,y=kde$x2 ,z = kde$fhat))
# Criando uma função pal para colorir o Raster
palRaster <- colorNumeric("Spectral", domain = KernelDensityRaster@data@values)
## Utilizando o mapa Leaflet com o raster
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .6) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
# Atribuindo NA às células com densidade baixa (<10) para torná-las transparentes no mapa
KernelDensityRaster@data@values[which(KernelDensityRaster@data@values < 1)] <- NA
# Utilizando a função palRaster para torná-las transparentes
palRaster <- colorNumeric("Spectral", domain = KernelDensityRaster@data@values, na.color = "transparent")
# Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .5) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
# Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .7) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
# Plotando o mapa novamente
leaflet() %>% addTiles() %>%
addRasterImage(KernelDensityRaster,
colors = palRaster,
opacity = .6) %>%
addLegend(pal = palRaster,
values = KernelDensityRaster@data@values,
title = "Densidade de Kernel")
